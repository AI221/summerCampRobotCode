#pragma config(Sensor, in1,    lightSensor1,   sensorReflection)
#pragma config(Sensor, in8,    centerWalllUltrasonic, sensorNone)
#pragma config(Motor,  port2,           left1,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           left2,         tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port4,           right1,        tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           right2,        tmotorServoContinuousRotation, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define DEFAULT_CENTER_WALL_DISTANCE 25
#define MAX_ADDITIONAL_CENTER_WALL_DISTANCE 25

enum material
{
	NONE = 0,
	blue = 1,
	grey = 2,
	red = 3,
	silver = 4,
};
bool isRed;
int numLaps;


bool isInRange(short value, int low, int high)
{
	return ((value > low) && (value < high));
}

material getMaterial(short sV) //sensorValue
{
	if (isInRange(sV,2100,22000))
	{
		return blue;
	}
	else if (isInRange(sV,2800,2900))
	{
		return grey;
	}
	else if (isInRange(sV,1700,1800))
	{
		return red;
	}
	else if (isInRange(sV,2700,2800))
	{
		return silver;
	}

	return NONE;
}
enum tasks {
	NONE = 0,
	turnAtCorner = 1,
	turnToRemoveBalls = 2,
	removeBalls = 3,
	stopRemovingBalls = 4,
	goStraight = 5,
	moveOutOfStart = 6,
	
};
enum directions {
	STOP = 0,
	right = 1,
	left = 2,
	straight = 3,
}
int targetCenterDistance = DEFAULT_CENTER_WALL_DISTANCE;
tasks currentTask = NONE;
directions straightBearDirection = straight;


void autonomous_code(bool semiauto)
{
	if ( currentTask == goStraight)
	{
		//we'll need to check for objects arround us, and of course, go straight
		short distance= SensorValue[centerWalllUltrasonic];
		if (distance > targetCenterDistance)
		{
			straightBearDirection = left;
		}
		else if (distance < targetCenterDistance)
		{
			straightBearDirection = right;
		}
		else
		{
			straightBearDirection = straight;
		}
		
		
	}
}

void ManuallyResetAuto()
{
	currentTask = 5;
}
task main()
{ 

	while(true){
		motor[left1] = vexRT[Ch3];
  	motor[left2] = vexRT[Ch3];
  	motor[right1] = vexRT[Ch2];
  	motor[right2] = vexRT[Ch2];

	}
}


//red tape is about 260
//blue is 400
//red is about 440
